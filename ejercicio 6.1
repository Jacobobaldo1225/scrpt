## 1 Recibir un número entero por teclado y decir si es positivo.

´´´bash 
echo "introduce un numero"
read num 
if {$num -lt 0}
echo "'${num} no es positivo"
then 
echo "'${num} es positivo"
fi
´´´

## 2 Recibir un número entero por teclado y decir si es negativo.

´´´bash 
echo "introduce un numero"
read num 
if {$num -lt 0}
echo "'${num} es negativo"
then 
echo "'${num} no es negativo"
fi
´´´

## 3 Recibir un número entero por teclado y decir si es igual a cero.

´´´bash 
echo "introduce un numero"
read num 
if {$num -eq 0}
echo "'${num} es 0"
then 
echo "'${num} no es 0"
fi
´´´

## 4 Recibir un numero entero por teclado y decir si es positivo, negativo o cero.

´´´bash 
if [ $numero -gt 0 ]; then
    echo "es positivo"
elif [ $numero -lt 0 ]; then
    echo "es negativo"
else
    echo "es 0"
fi
´´´

## 5 Comprobar si el número de parámetros introducido es igual a 3, en el caso de que sea otro número mostrará un mensaje de error por pantalla.

´´´bash
if [ $# -eq 3 ]; then
    echo "Número de parámetros correcto."
else
    echo "Error: el número de parámetros debe ser igual a 3."
fi
´´´

## 6 Recibir dos números por parámetros y lo suma. En caso de que el número de parámetros sea incorrecto mostrará un mensaje de error.

´´´bash
if [ $# -eq 2 ]; then
    # Convertir los parámetros a números y sumarlos
    num1=$(echo "$1" | bc)
    num2=$(echo "$2" | bc)
    suma=$(echo "$num1 + $num2" | bc)
    echo "La suma de $num1 y $num2 es $suma."
else
    echo "Error: se deben pasar exactamente dos números como parámetros."
fi
´´´

## 7 Recibir 3 parámetros. 
En el caso de que reciba un número diferente mostrará un mensaje de error.
Los dos primeros serán dos números y el tercero será uno de los siguientes símbolos “+” “-“ “x” “/”, dependiendo del tercer parámetro introducido realizara la correspondiente operación.
El en caso de que se introduzca un símbolo diferente, presentará un mensaje indicando cuales son las opciones correctas.

´´´bash
if [ $# -eq 3 ] && [ "$1" -eq "$1" ] 2>/dev/null && [ "$2" -eq "$2" ] 2>/dev/null; then
    num1=$1
    num2=$2
    operacion=$3

    # Realizar la operación correspondiente según el tercer parámetro
    if [ "$operacion" = "+" ]; then
        resultado=$(echo "$num1 + $num2" | bc)
        echo "La suma de $num1 y $num2 es $resultado."
    elif [ "$operacion" = "-" ]; then
        resultado=$(echo "$num1 - $num2" | bc)
        echo "La resta de $num1 y $num2 es $resultado."
    elif [ "$operacion" = "x" ]; then
        resultado=$(echo "$num1 * $num2" | bc)
        echo "La multiplicación de $num1 y $num2 es $resultado."
    elif [ "$operacion" = "/" ]; then
        resultado=$(echo "$num1 / $num2" | bc)
        echo "La división de $num1 y $num2 es $resultado."
    else
        echo "Error: el tercer parámetro debe ser uno de los siguientes símbolos: + - x /."
    fi
else
    echo "Error: se deben pasar exactamente tres parámetros numéricos."
fi
´´´

## 8 Recibir la ruta de un fichero e indicar si existe.

´´´bash
if [ $# -eq 1 ]; then
    if [ -f "$1" ]; then
        echo "El archivo $1 existe."
    else
        echo "El archivo $1 no existe."
    fi
else
    echo "Error: debe proporcionar la ruta de un archivo."
fi
´´´

## 9 Recibir la ruta de un fichero e indicar si es un directorio o un fichero.

´´´bash
if [ $# -eq 1 ]; then
    if [ -d "$1" ]; then
        echo "La ruta $1 se refiere a un directorio."
    elif [ -f "$1" ]; then
        echo "La ruta $1 se refiere a un archivo regular."
    else
        echo "La ruta $1 no se refiere ni a un archivo regular ni a un directorio existente."
    fi
else
    echo "Error: debe proporcionar una ruta."
fi
´´´

## 10 Recibir la ruta de un fichero e indicar los permisos que tiene (escritura, lectura, ejecución).

´´´bash
if [ $# -eq 1 ]; then
    if [ -e "$1" ]; then
        permisos=$(ls -l "$1" | cut -d" " -f1)
        echo "Los permisos de $1 son: $permisos"
    else
        echo "El archivo o directorio $1 no existe."
    fi
else
    echo "Error: debe proporcionar la ruta de un archivo o directorio."
fi
´´´

## 11 Imprimir por pantalla 50 veces la palabra hola.

´´´bash
for i in {1..50}
do
  echo "hola"
done
´´´

## 12 Leer una palabra por teclado y mostrarla por consola. Debe realizar esta operación 10 veces.

´´´bash
for i in {1..10}
do
  echo "Introduce una palabra:"
  read palabra
  echo "La palabra introducida es: $palabra"
done
´´´

## 13 Recibir un número por parámetro. El programa imprimirá la palabra “hola” el número de veces indicado por parámetro.

´´´bash 
if [ $# -eq 0 ]; then
    echo "Por favor proporcione un número como parámetro"
    exit 1
fi

# Obtener el número de veces a imprimir "hola"
num_veces=$1

# Imprimir "hola" num_veces veces
for (( i=1; i<=num_veces; i++ )); do
    echo "hola"
done
´´´

## 14 Se debe pasar un número n por parámetro. El programa imprimirá los números del 0 al n por pantalla.

´´´bash
if [ $# -eq 0 ]; then
    echo "Por favor proporcione un número como parámetro"
    exit 1
fi

# Obtener el número n
n=$1

# Imprimir los números del 0 al n
for (( i=0; i<=n; i++ )); do
    echo $i
done
´´´

## 15 Recibir un número n por parámetro. El programa tendrá que sumar todos los números entre 1 y n. Posteriormente mostrará el resultado de la suma por pantalla
´´´bash
if [ $# -eq 0 ]; then
    echo "Por favor proporcione un número como parámetro"
    exit 1
fi

n=$1

suma=0

for (( i=1; i<=n; i++ )); do
    suma=$((suma+i))
done

echo "La suma de los números del 1 al $n es: $suma"
´´´

## 16 Recibir dos números por parámetro.
El programa deberá hacer que el primer parámetro tome el valor del segundo parámetro y el segundo parámetro tome el valor del primero.
Por ejemplo si se introduce el 2 y el 9, en un principio $1 es 1 y $2 es 9.
Tras la ejecución del programa $1 valdrá 9 y $2 1.

´´´bash
if [ $# -ne 2 ]; then
    echo "Por favor proporcione dos números como parámetros"
    exit 1
fi

num1=$1
num2=$2

temp=$num1
num1=$num2
num2=$temp

echo "El primer número ahora es: $num1"
echo "El segundo número ahora es: $num2"
´´´

## 17 Programa que lea palabras hasta que se escriba “:q”

´´´bash
palabra=""

while true; do
    # Leer una palabra
    read -p "Escriba una palabra (escriba ':q' para salir): " palabra
   
    if [ "$palabra" = ":q" ]; then
        echo "Saliendo del programa."
        break
    fi
    echo "La palabra es: $palabra"
done
´´´

## 18 Programa que lea palabras y las guarde en un fichero, hasta que se escriba “:q”

´´´bash
archivo="palabras.txt"
touch $archivo

while true; do

    read -p "Escriba una palabra (escriba ':q' para salir): " palabra

    if [ "$palabra" = ":q" ]; then
        echo "Saliendo del programa."
        break
    fi

    echo $palabra >> $archivo
    echo "La palabra ha sido guardada en $archivo"
done
´´´

## 19 Programa que lea palabras y las guarde en un fichero de forma ordenada, hasta que se escriba “:q”

´´´bash
archivo="palabras_ordenadas.txt"
touch $archivo

while true; do
   
    read -p "Escriba una palabra (escriba ':q' para salir): " palabra

    if [ "$palabra" = ":q" ]; then
        echo "Saliendo del programa."
        break
    fi
    echo $palabra >> $archivo
    sort -o $archivo $archivo
    echo "La palabra ha sido guardada en $archivo"
done
´´´

## 20 Realiza un programa que solicite un número y compruebe si se encuentre en un archivo llamado números.txt

´´´bash
read -p "Ingrese un número: " numero

if grep -q "^$numero$" numeros.txt; then
    echo "El número $numero se encuentra en el archivo."
else
    echo "El número $numero no se encuentra en el archivo."
fi
´´´








